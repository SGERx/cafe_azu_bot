from pathlib import Path

from aiogram import Router
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import Message, FSInputFile

from app.tg_bot.bot_client.lexicon_cli import LEXICON_TEXT, format_as_text_list
from app.tg_bot.bot_client.states import FSMReservation, add_curr_state

commands_router = Router()

BASE_DIR = Path(__file__).resolve().parent.parent


@commands_router.message(CommandStart(), StateFilter(default_state))
async def process_start_command(message: Message):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª–∏–µ–Ω—Ç–∞."""

    full_name = message.from_user.full_name
    url = BASE_DIR / "media/start.jpg"
    # "/home/llirik_05/Dev/cafe_azu_bot_3/app/tg_bot/media/start.jpg"

    caption = LEXICON_TEXT[message.text].format(full_name=full_name)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    inp_ph = FSInputFile(path=url)
    await message.answer_photo(photo=inp_ph, caption=caption)


@commands_router.message(Command(commands=["help"]), StateFilter(default_state))
async def process_help_command(message: Message):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help. –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""

    await message.answer(LEXICON_TEXT[message.text])


@commands_router.message(Command(commands=["cancel"]), ~StateFilter(default_state))
async def process_help_command(message: Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /cancel.
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ,
    –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ,
    —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–æ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –∫—Ä–æ–º–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ.
    """

    await message.answer(LEXICON_TEXT["cancel"])
    await state.clear()


@commands_router.message(
    Command(commands=["add_reservation"]), StateFilter(default_state)
)
async def process_add_restaurant(message: Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /add_reservation.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è,
    –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –∏–º—è,
    —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞."""

    await message.answer(text=LEXICON_TEXT["fill_name"])
    await state.set_state(FSMReservation.fill_name)
    await add_curr_state(state, lexicon_key="fill_name", markup=None)


@commands_router.message(Command(commands=["reservations"]), StateFilter(default_state))
async def process_my_reservations_command(message: Message):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /reservations.
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞.
    """
    # todo —É—Ç–æ—á–Ω–∏—Ç—å –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º user_id
    user_id = message.from_user.id
    # todo reservations = await reservation_crud.read_actual_reservations_by_client(user_id)
    reservations = ["–ë—Ä–æ–Ω—å –Ω–∞ 30-11-2023", "–ë—Ä–æ–Ω—å –Ω–∞ 03-12-2023", "–ë—Ä–æ–Ω—å –Ω–∞ 05-12-2023"]
    if reservations:
        list_reserv = format_as_text_list(reservations, prefix="üåö - ")
        await message.answer(LEXICON_TEXT[message.text].format(reserv=list_reserv))
    else:
        await message.answer(LEXICON_TEXT["no_reserv"])


if __name__ == "__main__":
    print(url=BASE_DIR / "media/start.jpg")
